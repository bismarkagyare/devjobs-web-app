/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/modules/filterJobs.js":
/*!***********************************!*\
  !*** ./src/modules/filterJobs.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setupFilterButton: () => (/* binding */ setupFilterButton),
/* harmony export */   setupSearch: () => (/* binding */ setupSearch),
/* harmony export */   setupThemeToggle: () => (/* binding */ setupThemeToggle)
/* harmony export */ });
/* harmony import */ var _jobListings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jobListings */ "./src/modules/jobListings.js");

function setupSearch() {
  var searchBtns = document.querySelectorAll('.search-btn');
  var titleInput = document.getElementById('filterByTitle');
  var popupBtn = document.querySelector('.search-btn.btn-primary.show-on-mobile');
  popupBtn.addEventListener('click', function (e) {
    e.preventDefault();
    var popupLocationInput = document.getElementById('filterByLocationMobile');
    var popupCheckInput = document.getElementById('filterByFullTimeMobile');
    var searchParams = {
      title: titleInput.value,
      location: popupLocationInput.value,
      fullTime: popupCheckInput.checked
    };
    (0,_jobListings__WEBPACK_IMPORTED_MODULE_0__.fetchAndRenderJobListings)(searchParams);
    var searchBarMoreInfo = document.querySelector('.search-bar-more-info');
    searchBarMoreInfo.style.display = 'none';
    var backdrop = document.querySelector('.backdrop');
    backdrop.style.display = 'none';
  });
  searchBtns.forEach(function (searchBtn) {
    searchBtn.addEventListener('click', function (e) {
      e.preventDefault();
      var locationInput = document.getElementById('filterByLocation');
      var checkInput = document.getElementById('filterByFullTime');
      var searchParams = {
        title: titleInput.value,
        location: locationInput.value,
        fullTime: checkInput.checked
      };
      (0,_jobListings__WEBPACK_IMPORTED_MODULE_0__.fetchAndRenderJobListings)(searchParams);
    });
  });
}
function setupFilterButton() {
  var filterButton = document.querySelector('.filter-mobile');
  var searchBarMoreInfo = document.querySelector('.search-bar-more-info');
  var backdrop = document.querySelector('.backdrop');
  filterButton.addEventListener('click', function (e) {
    e.preventDefault();
    var display = getComputedStyle(searchBarMoreInfo).display;
    searchBarMoreInfo.style.display = display === 'none' ? 'flex' : 'none';
    var backdropDisplay = getComputedStyle(backdrop).display;
    backdrop.style.display = backdropDisplay === 'none' ? 'block' : 'none';
  });
  window.addEventListener('click', function (e) {
    // Check if the click event target is outside the popup element
    if (!searchBarMoreInfo.contains(e.target) && !filterButton.contains(e.target)) {
      searchBarMoreInfo.style.display = 'none';
      backdrop.style.display = 'none';
    }
  });
}
function setupThemeToggle() {
  var container = document.getElementById('container');
  var themeToggleBtn = document.querySelector('.theme-toggle-btn');
  themeToggleBtn.addEventListener('click', function () {
    container.classList.toggle('dark-theme');
  });
}

/***/ }),

/***/ "./src/modules/jobDetails.js":
/*!***********************************!*\
  !*** ./src/modules/jobDetails.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderJobDetails: () => (/* binding */ renderJobDetails)
/* harmony export */ });
function renderJobDetails(job) {
  var jobDetailsContainer = document.getElementById('job-details-container');
  var mainContainer = document.querySelector('.main-container');

  // Add classes to show job details and hide main content
  jobDetailsContainer.innerHTML = ''; // Clear existing content
  jobDetailsContainer.classList.add('show-details');
  mainContainer.classList.add('hide-content');
  var jobDetailsHTML = "\n    <main>\n      <section class=\"company-header\">\n        <div class=\"company-logo company-logo-big\" style=\"background-color: ".concat(job.logoBackground, "\">\n          <img src=\"").concat(job.logo, "\" alt=\"\" />\n        </div>\n        <div class=\"company-header-info\">\n          <div>\n            <h2>").concat(job.company, "</h2>\n            <p>").concat(job.website, "</p>\n          </div>\n          <a href=\"").concat(job.apply, "\" target=\"_blank\">\n            <button class=\"company-header-btn\">company site</button>\n          </a>\n        </div>\n      </section>\n\n      <section class=\"job-description\">\n        <div class=\"job-description-details\">\n          <div>\n            <div class=\"job-info job-time\">\n              <p>").concat(job.postedAt, "</p>\n              <span class=\"job-info-divider\"></span>\n              <p>").concat(job.contract, "</p>\n            </div>\n            <h1 class=\"job-desc-position\">").concat(job.position, "</h1>\n            <h4>").concat(job.location, "</h4>\n          </div>\n          <a href=\"").concat(job.website, "\">\n            <button class=\"company-header-btn apply-btn\">apply now</button>\n          </a>\n        </div>\n\n        <div>\n          <p>").concat(job.description, "</p>\n        </div>\n        <div>\n          <h3>Requirements</h3>\n          <p>").concat(job.requirements.content, "</p>\n          <ul>\n            ").concat(job.requirements.items.map(function (item) {
    return "<li><span class=\"job-requirement-dot\"></span>".concat(item, "</li>");
  }).join(''), "\n          </ul>\n        </div>\n        <div>\n          <h3>What you will do</h3>\n          <p>").concat(job.role.content, "</p>\n          <ol>\n              ").concat(job.role.items.map(function (item, index) {
    return "<li><span class=\"job-role-number\">".concat(index + 1, "</span>").concat(item, "</li>");
  }).join(''), "\n          </ol>\n        </div>\n      </section>\n    </main>\n\n    <footer>\n      <section class=\"job-banner\">\n        <div class=\"job-banner-desc\">\n          <h3>").concat(job.position, "</h3>\n          <p>").concat(job.company, "</p>\n        </div>\n        <a href=\"").concat(job.website, "\" target=\"_blank\">\n          <button class=\"company-header-btn apply-btn\">apply now</button>\n        </a>\n      </section>\n    </footer>\n  ");
  jobDetailsContainer.innerHTML = jobDetailsHTML;
  jobDetailsContainer.classList.add('fade-in');
}

/***/ }),

/***/ "./src/modules/jobListings.js":
/*!************************************!*\
  !*** ./src/modules/jobListings.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fetchAndRenderJobListings: () => (/* binding */ fetchAndRenderJobListings)
/* harmony export */ });
/* harmony import */ var _jobDetails__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jobDetails */ "./src/modules/jobDetails.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function fetchAndRenderJobListings() {
  return _fetchAndRenderJobListings.apply(this, arguments);
}
function _fetchAndRenderJobListings() {
  _fetchAndRenderJobListings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var searchParams,
      response,
      data,
      filteredData,
      jobListingsContainer,
      displayJobs,
      jobListingsHTML,
      jobDetailsLinks,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          searchParams = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          _context.prev = 1;
          _context.next = 4;
          return fetch('./data.json');
        case 4:
          response = _context.sent;
          _context.next = 7;
          return response.json();
        case 7:
          data = _context.sent;
          // Apply search filters
          filteredData = data.filter(function (item) {
            var titleMatch = searchParams.title ? item.position.toLowerCase().includes(searchParams.title.toLowerCase()) : true;
            var locationMatch = searchParams.location ? item.location.toLowerCase().includes(searchParams.location.toLowerCase()) : true;
            var fullTimeMatch = searchParams.fullTime ? item.contract === 'Full Time' : true;
            return titleMatch && locationMatch && fullTimeMatch;
          });
          jobListingsContainer = document.querySelector('.job-list');
          displayJobs = filteredData.map(function (item) {
            return "\n        <article class=\"job-card\">\n          <div class=\"company-logo company-logo-small\" style=\"background-color: ".concat(item.logoBackground, "\">\n            <img src=\"").concat(item.logo, "\" alt=\"\" />\n          </div>\n          <div class=\"job-info\">\n            <p>").concat(item.postedAt, "</p>\n            <span class=\"job-info-divider\"></span>\n            <p>").concat(item.contract, "</p>\n          </div>\n          <a href=\"#\" class=\"job-details\" data-job-id=\"").concat(item.id, "\">\n            <h3 class=\"job-position\">").concat(item.position, "</h3>\n          </a>\n          <p>").concat(item.company, "</p>\n          <h4 class=\"job-location\">").concat(item.location, "</h4>\n        </article>\n      ");
          });
          jobListingsHTML = displayJobs.join('');
          jobListingsContainer.innerHTML = jobListingsHTML;

          // Event listener for job details
          jobDetailsLinks = document.querySelectorAll('.job-details');
          jobDetailsLinks.forEach(function (link) {
            link.addEventListener('click', function (e) {
              e.preventDefault();
              var jobId = link.getAttribute('data-job-id');
              var selectedJob = filteredData.find(function (job) {
                return job.id === parseInt(jobId, 10);
              });
              (0,_jobDetails__WEBPACK_IMPORTED_MODULE_0__.renderJobDetails)(selectedJob);
            });
          });
          _context.next = 20;
          break;
        case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](1);
          console.error('Error:', _context.t0);
        case 20:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 17]]);
  }));
  return _fetchAndRenderJobListings.apply(this, arguments);
}

/***/ }),

/***/ "./src/styles/style.scss":
/*!*******************************!*\
  !*** ./src/styles/style.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/style.scss */ "./src/styles/style.scss");
/* harmony import */ var _modules_jobListings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/jobListings */ "./src/modules/jobListings.js");
/* harmony import */ var _modules_filterJobs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/filterJobs */ "./src/modules/filterJobs.js");





window.addEventListener('DOMContentLoaded', function () {
  (0,_modules_jobListings__WEBPACK_IMPORTED_MODULE_1__.fetchAndRenderJobListings)();
  (0,_modules_filterJobs__WEBPACK_IMPORTED_MODULE_2__.setupSearch)();
  (0,_modules_filterJobs__WEBPACK_IMPORTED_MODULE_2__.setupFilterButton)();
  (0,_modules_filterJobs__WEBPACK_IMPORTED_MODULE_2__.setupThemeToggle)();
});
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,